
---NEWLY ADDED
  CREATE TABLE "BL_USERS" 
   (	
    "USER_ID" NUMBER, 
	"USER_TYPE" NUMBER, 
	"NAME" VARCHAR2(100), 
	"USERNAME" VARCHAR2(100), 
	"PASSWORD" VARCHAR2(100), 
	"IS_LOCKED" VARCHAR2(1) DEFAULT 'N', 
	"LOCK_REASON" VARCHAR2(500), 
	"LOCK_UNTIL" DATE, 
	"MOBILE" VARCHAR2(50), 
	"EMP_ID" NUMBER(10,0), 
	"STATUS" VARCHAR2(10), 
	"CREATED_BY" VARCHAR2(100), 
	"CREATED_AT" TIMESTAMP (8), 
	"UPDATED_BY" VARCHAR2(100), 
	"UPDATED_AT" TIMESTAMP (8), 
	"PASSWORD1" VARCHAR2(200), 
	 PRIMARY KEY ("USER_ID")
  USING INDEX  ENABLE
   ) ;
/

  CREATE SEQUENCE  "BL_USERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1002 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
/

CREATE OR REPLACE TRIGGER BL_USERS_BR_TRI
    BEFORE INSERT 
    ON BL_USERS 
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        IF (:NEW.USER_ID) IS NULL THEN
            :NEW.USER_ID :=  BL_USERS_SEQ.NEXTVAL;
        END IF;
        :NEW.CREATED_BY := NVL(v('APP_USER'),1);
		:NEW.CREATED_AT := SYSDATE;
        :NEW.PASSWORD1 :=  :NEW.PASSWORD;
        :NEW.PASSWORD := HASH_KEY (:NEW.PASSWORD);

    ELSIF UPDATING THEN
		 :NEW.UPDATED_BY := NVL(v('APP_USER'),1);
		 :NEW.UPDATED_AT := SYSDATE;
	END IF;
END BL_USERS_BR_TRI;
/

CREATE OR REPLACE FUNCTION FNC_USERS_LOGIN(P_USERNAME VARCHAR2,P_PASSWORD VARCHAR2)
    RETURN BOOLEAN
IS
    vRETURN   BOOLEAN := TRUE;
    vCHECK    NUMBER;
BEGIN
    -- CHECK USERNAME AND PASSWORD
    SELECT COUNT(1)
      INTO vCHECK
      FROM BL_USERS
        WHERE     UPPER(USERNAME) = UPPER(P_USERNAME)
        AND      PASSWORD = HASH_KEY(P_PASSWORD)
        AND IS_LOCKED = 'N' AND STATUS = '1';
    
    IF vCHECK = 1
    THEN
        vRETURN := TRUE;
    ELSE

        apex_error.add_error (
        p_message          => 'This account is not active!',
        p_display_location => apex_error.c_inline_with_field_and_notif,
        p_page_item_name   => 'P9999_PASSWORD' );

        vRETURN := FALSE;

    END IF;
    RETURN vRETURN;
END FNC_USERS_LOGIN;
/

  CREATE TABLE "BL_USER_ROLE_MST" 
   (	"ID" NUMBER, 
	"ROLE_NAME" VARCHAR2(100), 
	"STATUS" VARCHAR2(10), 
	"CREATED_BY" VARCHAR2(100), 
	"CREATED_AT" TIMESTAMP (8), 
	"UPDATED_BY" VARCHAR2(100), 
	"UPDATED_AT" TIMESTAMP (8), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;


CREATE  SEQUENCE  BL_USER_ROLE_MST_SEQ
  START WITH 1000
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
  NOKEEP
  NOSCALE
  GLOBAL;



  CREATE OR REPLACE  TRIGGER "BL_USER_ROLE_MST_TRG" 
BEFORE UPDATE OR INSERT OR DELETE
ON  BL_USER_ROLE_MST
FOR EACH ROW
BEGIN
	IF INSERTING THEN
		IF(:NEW.ID IS NULL) THEN
			:NEW.ID := BL_USER_ROLE_MST_SEQ.NEXTVAL;
		END IF;
		 :NEW.CREATED_BY := NVL(v('APP_USER'),1);
		 :NEW.CREATED_AT := SYSDATE;
	ELSIF UPDATING THEN
		 :NEW.UPDATED_BY := NVL(v('APP_USER'),1);
		:NEW.UPDATED_AT := SYSDATE;
	END IF;
END;
/


CREATE TABLE "BL_USER_ROLE_DTL_OTHERS" 
   (	"ID" NUMBER, 
	"ROLE_ID" NUMBER, 
	"PAGE_ID" NUMBER, 
	"STATUS" VARCHAR2(10), 
	"CREATED_BY" VARCHAR2(100), 
	"CREATED_AT" TIMESTAMP (8), 
	"UPDATED_BY" VARCHAR2(100), 
	"UPDATED_AT" TIMESTAMP (8), 
	"USERNAME" VARCHAR2(100) NOT NULL ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;


CREATE  SEQUENCE  BL_USER_ROLE_DTL_OTHERS_SEQ
  START WITH 1000
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
  NOKEEP
  NOSCALE
  GLOBAL;



  CREATE OR REPLACE  TRIGGER "BL_USER_ROLE_DTL_OTHERS_TRG" 
BEFORE UPDATE OR INSERT OR DELETE
ON BL_USER_ROLE_DTL_OTHERS
FOR EACH ROW
BEGIN
	IF INSERTING THEN
		IF(:NEW.ID IS NULL) THEN
			:NEW.ID := BL_USER_ROLE_DTL_OTHERS_SEQ.NEXTVAL;
		END IF;
		 :NEW.CREATED_BY := NVL(v('APP_USER'),1);
		 :NEW.CREATED_AT := SYSDATE;
	ELSIF UPDATING THEN
		 :NEW.UPDATED_BY := NVL(v('APP_USER'),1);
		:NEW.UPDATED_AT := SYSDATE;
	END IF;
END;
/



CREATE TABLE "BL_USER_ROLE"
(
    "ID"            NUMBER,
    "ROLE_ID"       NUMBER,
    "USERNAME"      VARCHAR2 (100),
    "STATUS"        VARCHAR2 (10),
    "CREATED_BY"    VARCHAR2 (100),
    "CREATED_AT"    TIMESTAMP (8),
    "UPDATED_BY"    VARCHAR2 (100),
    "UPDATED_AT"    TIMESTAMP (8),
    PRIMARY KEY ("ID") USING INDEX ENABLE
);
/


CREATE  SEQUENCE  BL_USER_ROLE_SEQ
  START WITH 1000
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
  NOKEEP
  NOSCALE
  GLOBAL;
/

CREATE OR REPLACE TRIGGER "BL_USER_ROLE_TRG" 
BEFORE UPDATE OR INSERT OR DELETE
ON BL_USER_ROLE
FOR EACH ROW
BEGIN
	IF INSERTING THEN
		IF(:NEW.ID IS NULL) THEN
			:NEW.ID := BL_USER_ROLE_SEQ.NEXTVAL;
		END IF;
		 :NEW.CREATED_BY := NVL(v('APP_USER'),1);
		 :NEW.CREATED_AT := SYSDATE;
	ELSIF UPDATING THEN
		 :NEW.UPDATED_BY := NVL(v('APP_USER'),1);
		:NEW.UPDATED_AT := SYSDATE;
	END IF;
END;
/



CREATE TABLE "BL_USER_ROLE_DTL"
(
    "ID"            NUMBER,
    "ROLE_ID"       NUMBER,
    "PAGE_ID"       NUMBER,
    "STATUS"        VARCHAR2 (10),
    "CREATED_BY"    VARCHAR2 (100),
    "CREATED_AT"    TIMESTAMP (8),
    "UPDATED_BY"    VARCHAR2 (100),
    "UPDATED_AT"    TIMESTAMP (8),
    PRIMARY KEY ("ID") USING INDEX ENABLE
);
/

CREATE  SEQUENCE  BL_USER_ROLE_DTL_SEQ
  START WITH 1000
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER
  NOKEEP
  NOSCALE
  GLOBAL;
/

CREATE OR REPLACE  TRIGGER "BL_USER_ROLE_DTL_TRG" 
BEFORE UPDATE OR INSERT OR DELETE
ON BL_USER_ROLE_DTL
FOR EACH ROW
BEGIN
	IF INSERTING THEN
		IF(:NEW.ID IS NULL) THEN
			:NEW.ID := BL_USER_ROLE_DTL_SEQ.NEXTVAL;
		END IF;
		 :NEW.CREATED_BY := NVL(v('APP_USER'),1);
		 :NEW.CREATED_AT := SYSDATE;
	ELSIF UPDATING THEN
		 :NEW.UPDATED_BY := NVL(v('APP_USER'),1);
		:NEW.UPDATED_AT := SYSDATE;
	END IF;
END;
/
   
CREATE OR REPLACE FUNCTION BL_USER_PAGE_ACCESS(P_PAGE_ID NUMBER)
RETURN BOOLEAN IS
V_COUNT NUMBER;
BEGIN
SELECT COUNT(*) INTO V_COUNT FROM
(
    SELECT 1 FROM BL_USER_ROLE_DTL
    WHERE PAGE_ID = P_PAGE_ID
    AND ROLE_ID IN(SELECT ROLE_ID FROM BL_USER_ROLE WHERE UPPER(USERNAME) = UPPER(V('APP_USER')))
     UNION
     SELECT 1 FROM BL_USER_ROLE_DTL_OTHERS WHERE UPPER(USERNAME) = UPPER(V('APP_USER')) AND PAGE_ID = P_PAGE_ID
);
IF V_COUNT > 0 THEN
RETURN TRUE;
ELSE
RETURN FALSE;
END IF;
END BL_USER_PAGE_ACCESS;
/

